package game;

import java.util.Arrays;

/**
 * Main game controller for the Snake game.
 * <p>
 * Handles game initialization, main loop, input processing, and rendering.
 * Delegates movement, collision detection, and board updates to Snake and Board.
 * </p>
 * javadoc generated by chatgpt. April 25th 2025
 */
public class SnakeGame {

    private Snake snake;
    private Apple apple;
    private Board board;
    private int boardRows;
    private int boardColumns;
    private GameState state;

    /**
     * Constructs a new SnakeGame with a 20x20 board.
     * Starts the snake at the center and prepares the apple.
     */
    public SnakeGame() {
        boardColumns = 20;
        boardRows = 20;
        board = new Board(boardColumns, boardRows);

        snake = new Snake(boardColumns/2, boardRows/2); //spawn snake in middle of board

        apple = new Apple();
        apple.setBoard(board);

        state = GameState.RUNNING;

    }

    /**
     * Moves the snake one step forward if the game is still running.
     */
    public void moveSnake() {
        if (state == GameState.RUNNING) {
            snake.move();
        }
    }

    /**
     * Checks if the snake has collided with the walls or itself.
     * If so, sets the game state to GAME_OVER.
     *
     * @return true if the snake crashed, false otherwise
     */
    public boolean checkCollision() {
        if (snake.hasCrashed(boardColumns, boardRows)) {
            state = GameState.GAME_OVER;

            return true;
        }
        return false;
    }

    /**
     * Checks if the snake's head position overlaps the apple's position.
     * If so, grows the snake and respawns the apple.
     *
     * @return true if the apple was eaten, false otherwise
     */
    public boolean checkAppleEat() {
        if (Arrays.toString(snake.getHead()).equals(Arrays.toString(apple.getApplePosition()))) {
            snake.eat();
            apple.despawn();
            apple.spawn();
            return true;
        }
        return false;
    }

    /**
     * Updates the internal board representation to reflect the current
     * snake and apple positions.
     */
    public void updateBoard() {
        board.updateBoard(snake, apple);
    }

    /**
     * Returns the current board grid.
     *
     * @return a 2D integer array representing the board state
     */
    public int[][] getGrid() {
        return board.getGrid();
    }

    /**
     * Returns the current state of the game (e.g., RUNNING or GAME_OVER).
     *
     * @return the game state
     */
    public GameState getState() {
        return state;
    }

    /**
     * Returns the Snake object player controls.
     *
     * @return the snake
     */
    public Snake getSnake() {
        return snake;
    }

    /**
     * Returns the Board object (the grid).
     *
     * @return the board
     */
    public Board getBoard() {
        return board;
    }

    /**
     * Returns the Apple object placed on the board.
     *
     * @return the apple
     */
    public Apple getApple() {
        return apple;
    }

    /**
     * Returns the number of rows in the board.
     *
     * @return number of rows
     */
    public int getBoardRows() {
        return boardRows;
    }

    /**
     * Returns the number of columns in the board.
     *
     * @return number of columns
     */
    public int getBoardColumns() {
        return boardColumns;
    }
}