package game;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.util.List;

/**
 * Handles storage and updating of the player's top score.
 *
 * <p>Extends {@link Score} to integrate file operations for reading and writing the highest score achieved across sessions.</p>
 */
public class TopScore extends Score {

    private static final String FILE_PATH = "src/main/TopScore/TopScore.txt";
    private static int oldTop;
    private static int newTop;

    /**
     * Retrieves the current game score from {@link Score} and stores it.
     */
    public static void getGameScore(){
        newTop = Score.getCurrentScore();
    }

    /**
     * Updates the saved top score if the player's current score is higher than the previous best.
     *
     * <p>Reads the old top score from file, compares it with the current score,
     * and writes the new score to file if higher.</p>
     */
    public static void updateTopScore(){
        getGameScore();
        getScoreFromFile();

        if (newTop > oldTop){
            FileHandler.writeToFile(FILE_PATH, String.valueOf(newTop));
        }
    }

    /**
     * Reads and returns the previous top score from the text file.
     *
     * @return the previous highest score
     */
    public static int getScoreFromFile() {

        FileHandler.readFile(FILE_PATH);
        oldTop = Integer.parseInt(FileHandler.getFirstLine());

        return oldTop;
    }

    /**
     * Helper class that handles file reading and writing top scores.
     */
    private static class FileHandler {

        private static String firstLine;

        /**
         * Reads the top score from file.
         *
         * <p>If the file does not exist, it creates a new file and writes a 0.</p>
         *
         * @param filePath path to the score file
         */
        private static void readFile(String filePath) {
            File file = new File(filePath);

            try {
                // Check if file exists
                if (!file.exists()) {

                    // If not, create it
                    if (file.createNewFile()) {
                        System.out.println("File created");

                        // Writes "0" to new file
                        FileWriter writer = new FileWriter(file);
                        writer.write("0");
                        writer.close();

                    } else {
                        System.out.println("Failed to create the file.");
                        return;
                    }

                } else {
                    System.out.println("File exists");
                }

                // Read the file
                List<String> lines = Files.readAllLines(file.toPath());
                firstLine = lines.getFirst();

            } catch (IOException e) {
                System.out.println("An error occurred.");
                e.printStackTrace();
            }
        }

        /**
         * Writes a new top score to the specified file, replacing any existing content.
         *
         * @param filePath    the path of the file to write to
         * @param textToWrite the new top score as a string
         *
         * javadoc generated by chatgpt. April 27 2025
         */
        private static void writeToFile(String filePath, String textToWrite) {
            try (FileWriter writer = new FileWriter(filePath, false)) {
                writer.write(textToWrite);
                writer.close();
                System.out.println("Successfully wrote to file");
            } catch (IOException e) {
                System.out.println("An error occurred");
                e.printStackTrace();
            }
        }

        /**
         * Returns the first line retrieved from the last file read.
        */
        public static String getFirstLine(){
            return firstLine;
        }

    }



}
